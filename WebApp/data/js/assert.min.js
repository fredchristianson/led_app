'use strict';class AssertionError$$module$ extends Error{constructor(a="assertion failed"){super(a)}}
class Assert$$module${equal(a,b,c=null){this.test(()=>a==b,c||"assert.equal() failed")}notEqual(a,b,c=null){this.test(()=>a!=b,c||"assert.notEqual() failed")}null(a,b=null){this.test(()=>null===a||"undefined"===typeof a,b||"assert.null() failed")}notNull(a,b=null){this.test(()=>null!==a&&"undefined"!==typeof a,b||"assert.notNull() failed")}range(a,b,c,d){this.test(()=>a>=b&&a<=c,d||"assert.notEqual() failed")}notRange(a,b,c,d){this.test(()=>a<b||a>c,d||"assert.notEqual() failed")}empty(a,b){var c=
!1;"undefined"===typeof a||null===a?c=!0:"string"===typeof a?c=!0:Array.isArray(a)&&(c=!0);if(!c)throw new AssertionError$$module$(b||"expected value to be an empty string or array");}notEmpty(a,b){try{if(null==a||"string"!=typeof a&&!Array.isArray(a))throw new AssertionError$$module$(b||"assert.notEmpty() failed.  Requires string or array");if("string"==typeof a&&0==a.trim().length)throw new AssertionError$$module$(b||"assert.notEmpty() failed.  String is empty");if(Array.isArray(a)&&0==a.length)throw new AssertionError$$module$(b||
"assert.notEmpty() failed.  Array is empty");}catch(c){throw c;}}type(a,b,c){if(Array.isArray(b)){if(!b.some(d=>a instanceof d))throw new AssertionError$$module$(c);}else if(!(a instanceof b))throw new AssertionError$$module$(c);}test(a,b){"function"==typeof a&&(a=a());if(!a)throw new AssertionError$$module$(b);}false(a){throw new AssertError(a);}}const assert$$module$=new Assert$$module$;var $jscompDefaultExport$$module$=assert$$module$,module$={};module$.Assert=Assert$$module$;
module$.AssertionError=AssertionError$$module$;module$.assert=assert$$module$;module$.default=$jscompDefaultExport$$module$;